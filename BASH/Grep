#!/bin/bash

# Search a file for lines matching a regular expression pattern.
# Return the line number and contents of each matching line.

collect_options () {
  while getopts ":nlivx" flag; do
    case $flag in
      n ) OPTIONS[n]=1 #Prefix each matching line with its line number within its file
        ;;
      l ) OPTIONS[l]=1 #Print only the names of files that contain at least one matching line
        ;;
      i ) OPTIONS[i]=1 #Match line using a case-insensitive comparison
        ;;
      v ) OPTIONS[v]=1 #Invert the program -- collect all lines that fail to match the pattern.
        ;;
      x) OPTIONS[x]=1 #Only match entire lines, instead of lines that contain a match
        ;;
      ? ) echo "Invalid option. Available options: -n, -l, -i, -v, -x";
          exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))
  PATTERN=$1
  shift 1
  FILES=$*
}

read_file () {
  local cnt=0
  local full_line=
  if (( OPTIONS[i] == 1 )); then PATTERN=$(echo "$PATTERN" | tr '[A-Z]' '[a-z]'); fi
  while read -r line; do
    cnt=$((cnt + 1))
    if (( OPTIONS[i] == 1 )); then line=$(echo "$line" | tr '[A-Z]' '[a-z]'); fi
    if (( OPTIONS[v] == 0 )) && if (( OPTIONS[x] == 1 )); then [[ $line = "$PATTERN" ]]; else [[ $line =~ "$PATTERN" ]]; fi; then
      full_line=$line
    elif (( OPTIONS[v] == 1 )) && if (( OPTIONS[x] == 1 )); then ! [[ $line = "$PATTERN" ]]; else ! [[ $line =~ "$PATTERN" ]]; fi; then
      full_line=$line
    else
      continue
    fi
    if (( OPTIONS[n] == 1 )); then full_line="$cnt:$full_line"; fi
    if (( OPTIONS[l] == 1 )); then full_line="$1:$full_line" ; fi
    printf "%s\n" "$full_line"
  done < "$1"
}

main () {
  clear
  declare -A OPTIONS=(
    [n]=0
    [l]=0
    [i]=0
    [v]=0
    [x]=0
  )
  PATTERN=
  FILES=
  collect_options "$@"
  for file in $FILES; do
    read_file $file
  done
}

main "$@"
